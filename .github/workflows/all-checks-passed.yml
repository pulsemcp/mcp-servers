name: All CI Checks Passed

on:
  workflow_run:
    workflows: ['AppSignal CI', 'Lint and Format Check']
    types: [completed]

permissions:
  contents: read
  pull-requests: read
  checks: read
  actions: read

jobs:
  all-checks-passed:
    name: All CI Checks Passed
    runs-on: ubuntu-latest
    if: github.event.workflow_run.event == 'pull_request'

    steps:
      - name: Check all CI workflows
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Get PR number from the workflow run
            const workflowRun = context.payload.workflow_run;
            if (!workflowRun.pull_requests || workflowRun.pull_requests.length === 0) {
              console.log('No PR associated with this workflow run');
              return;
            }

            const pr_number = workflowRun.pull_requests[0].number;
            const pr_head_sha = workflowRun.head_sha;

            console.log(`Checking CI status for PR #${pr_number} (SHA: ${pr_head_sha})`);

            // Get PR files to determine which checks should run
            const files = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: pr_number,
              per_page: 100
            });

            const changedFiles = files.data.map(f => f.filename);

            const shouldRunAppSignal = changedFiles.some(f => 
              f.startsWith('experimental/appsignal/') || 
              f === '.github/workflows/appsignal-ci.yml'
            );

            const shouldRunLint = changedFiles.some(f => 
              f.endsWith('.ts') || 
              f.endsWith('.tsx') || 
              f.endsWith('.json') || 
              f.endsWith('.yml') || 
              f.endsWith('.yaml') ||
              f === '.eslintrc.json' ||
              f === '.prettierrc.json'
            );

            // Wait a bit for all check runs to be registered
            await new Promise(resolve => setTimeout(resolve, 5000));

            // Get all check runs for this commit
            const checkRuns = await github.rest.checks.listForRef({
              owner,
              repo,
              ref: pr_head_sha,
              per_page: 100
            });

            // Filter to only the latest run of each check
            const latestRuns = {};
            for (const run of checkRuns.data.check_runs) {
              if (run.app.slug === 'github-actions' && run.name !== 'All CI Checks Passed') {
                if (!latestRuns[run.name] || new Date(run.started_at) > new Date(latestRuns[run.name].started_at)) {
                  latestRuns[run.name] = run;
                }
              }
            }

            // Check status of expected workflows
            let allPassed = true;
            let statusMessage = '## CI Status Summary\n\n';

            // Helper function to check a specific test
            const checkTest = (name, run) => {
              if (!run) {
                statusMessage += `❌ **${name}**: Not found\n`;
                return false;
              } else if (run.conclusion === 'success') {
                statusMessage += `✅ **${name}**: Passed\n`;
                return true;
              } else if (run.status === 'in_progress' || run.status === 'queued') {
                statusMessage += `⏳ **${name}**: In progress\n`;
                return false;
              } else {
                statusMessage += `❌ **${name}**: ${run.conclusion || 'Failed'}\n`;
                return false;
              }
            };

            if (shouldRunLint) {
              const lintPassed = checkTest('Lint & Type Check', latestRuns['Lint & Type Check']);
              if (!lintPassed) allPassed = false;
            }

            if (shouldRunAppSignal) {
              const functionalPassed = checkTest('AppSignal Functional Tests', latestRuns['AppSignal Functional Tests']);
              const integrationPassed = checkTest('AppSignal Integration Tests', latestRuns['AppSignal Integration Tests']);
              if (!functionalPassed || !integrationPassed) allPassed = false;
            }

            if (!shouldRunLint && !shouldRunAppSignal) {
              statusMessage += '✅ No CI checks required for these changes\n';
            }

            console.log(statusMessage);

            if (!allPassed) {
              core.setFailed('Not all required CI checks have passed');
            } else {
              console.log('\n✅ All required CI checks have passed!');
            }
