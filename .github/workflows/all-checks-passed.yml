name: All CI Checks Passed

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_run:
    workflows: ['AppSignal CI', 'Lint and Format Check']
    types: [completed]

jobs:
  all-checks-passed:
    name: All CI Checks Passed
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Check all workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request?.head.sha || context.sha,
            });

            const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head_sha: context.payload.pull_request?.head.sha || context.sha,
              per_page: 100
            });

            // Filter out this workflow itself and any non-CI workflows
            const relevantWorkflows = workflowRuns.workflow_runs.filter(run => 
              run.name !== 'All CI Checks Passed' && 
              (run.name === 'AppSignal CI' || run.name === 'Lint and Format Check')
            );

            console.log(`Found ${relevantWorkflows.length} relevant workflow runs`);

            // Group by workflow name to get latest run for each
            const latestRuns = {};
            for (const run of relevantWorkflows) {
              if (!latestRuns[run.name] || new Date(run.created_at) > new Date(latestRuns[run.name].created_at)) {
                latestRuns[run.name] = run;
              }
            }

            let allPassed = true;
            let failureMessages = [];

            // Check status of latest runs
            for (const [workflowName, run] of Object.entries(latestRuns)) {
              console.log(`${workflowName}: ${run.status} (${run.conclusion || 'in progress'})`);
              
              if (run.status === 'completed') {
                if (run.conclusion !== 'success') {
                  allPassed = false;
                  failureMessages.push(`${workflowName}: ${run.conclusion}`);
                }
              } else {
                // Workflow is still running
                allPassed = false;
                failureMessages.push(`${workflowName}: still ${run.status}`);
              }
            }

            // Also check if required workflows have run at all
            const expectedWorkflows = [];

            // Check if this PR touches AppSignal files
            if (context.payload.pull_request) {
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
              });
              
              const hasAppSignalChanges = files.some(file => 
                file.filename.startsWith('experimental/appsignal/') || 
                file.filename === '.github/workflows/appsignal-ci.yml'
              );
              
              const hasLintableChanges = files.some(file => 
                file.filename.endsWith('.ts') || 
                file.filename.endsWith('.tsx') || 
                file.filename.endsWith('.json') || 
                file.filename.endsWith('.yml') || 
                file.filename.endsWith('.yaml')
              );
              
              if (hasAppSignalChanges) {
                expectedWorkflows.push('AppSignal CI');
              }
              if (hasLintableChanges) {
                expectedWorkflows.push('Lint and Format Check');
              }
            }

            // Check if all expected workflows have run
            for (const workflow of expectedWorkflows) {
              if (!latestRuns[workflow]) {
                allPassed = false;
                failureMessages.push(`${workflow}: not run`);
              }
            }

            if (allPassed && Object.keys(latestRuns).length > 0) {
              console.log('✅ All CI checks passed!');
            } else if (Object.keys(latestRuns).length === 0 && expectedWorkflows.length === 0) {
              console.log('ℹ️  No CI checks required for this PR');
            } else {
              console.log('❌ One or more CI checks failed or are pending');
              for (const msg of failureMessages) {
                console.log(`  - ${msg}`);
              }
              core.setFailed('Not all CI checks passed');
            }
