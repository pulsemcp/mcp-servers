name: All CI Checks Passed

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_run:
    workflows: ['AppSignal CI', 'Lint and Format Check']
    types: [completed]

jobs:
  all-checks-passed:
    name: All CI Checks Passed
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.event == 'pull_request')

    steps:
      - name: Check all CI workflows
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Get PR number
            let pr_number;
            if (context.eventName === 'pull_request') {
              pr_number = context.payload.pull_request.number;
            } else {
              // For workflow_run events, get PR from the workflow run
              const runs = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id: context.payload.workflow_run.workflow_id,
                per_page: 1
              });
              if (runs.data.workflow_runs.length > 0 && runs.data.workflow_runs[0].pull_requests.length > 0) {
                pr_number = runs.data.workflow_runs[0].pull_requests[0].number;
              } else {
                console.log('No PR associated with this workflow run');
                return;
              }
            }

            // Get PR details to check which files changed
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: pr_number
            });

            const files = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: pr_number,
              per_page: 100
            });

            // Determine which workflows should run based on changed files
            const changedFiles = files.data.map(f => f.filename);

            const shouldRunAppSignal = changedFiles.some(f => 
              f.startsWith('experimental/appsignal/') || 
              f === '.github/workflows/appsignal-ci.yml'
            );

            const shouldRunLint = changedFiles.some(f => 
              f.endsWith('.ts') || 
              f.endsWith('.tsx') || 
              f.endsWith('.json') || 
              f.endsWith('.yml') || 
              f.endsWith('.yaml') ||
              f === '.eslintrc.json' ||
              f === '.prettierrc.json'
            );

            // Get all workflow runs for this PR
            const checkRuns = await github.rest.checks.listForRef({
              owner,
              repo,
              ref: pr.data.head.sha,
              per_page: 100
            });

            // Filter to only the latest run of each workflow
            const latestRuns = {};
            for (const run of checkRuns.data.check_runs) {
              if (run.app.slug === 'github-actions' && run.name !== 'All CI Checks Passed') {
                if (!latestRuns[run.name] || new Date(run.started_at) > new Date(latestRuns[run.name].started_at)) {
                  latestRuns[run.name] = run;
                }
              }
            }

            // Check status of expected workflows
            let allPassed = true;
            let statusMessage = '## CI Status Summary\n\n';

            if (shouldRunLint) {
              const lintRun = latestRuns['Lint & Type Check'];
              if (!lintRun) {
                statusMessage += '❌ **Lint & Type Check**: Not run yet\n';
                allPassed = false;
              } else if (lintRun.conclusion === 'success') {
                statusMessage += '✅ **Lint & Type Check**: Passed\n';
              } else if (lintRun.status === 'in_progress') {
                statusMessage += '⏳ **Lint & Type Check**: In progress\n';
                allPassed = false;
              } else {
                statusMessage += `❌ **Lint & Type Check**: ${lintRun.conclusion}\n`;
                allPassed = false;
              }
            }

            if (shouldRunAppSignal) {
              const functionalTests = latestRuns['AppSignal Functional Tests'];
              const integrationTests = latestRuns['AppSignal Integration Tests'];
              
              if (!functionalTests) {
                statusMessage += '❌ **AppSignal Functional Tests**: Not run yet\n';
                allPassed = false;
              } else if (functionalTests.conclusion === 'success') {
                statusMessage += '✅ **AppSignal Functional Tests**: Passed\n';
              } else if (functionalTests.status === 'in_progress') {
                statusMessage += '⏳ **AppSignal Functional Tests**: In progress\n';
                allPassed = false;
              } else {
                statusMessage += `❌ **AppSignal Functional Tests**: ${functionalTests.conclusion}\n`;
                allPassed = false;
              }
              
              if (!integrationTests) {
                statusMessage += '❌ **AppSignal Integration Tests**: Not run yet\n';
                allPassed = false;
              } else if (integrationTests.conclusion === 'success') {
                statusMessage += '✅ **AppSignal Integration Tests**: Passed\n';
              } else if (integrationTests.status === 'in_progress') {
                statusMessage += '⏳ **AppSignal Integration Tests**: In progress\n';
                allPassed = false;
              } else {
                statusMessage += `❌ **AppSignal Integration Tests**: ${integrationTests.conclusion}\n`;
                allPassed = false;
              }
            }

            if (!shouldRunLint && !shouldRunAppSignal) {
              statusMessage += '✅ No CI checks required for these changes\n';
            }

            console.log(statusMessage);

            if (!allPassed) {
              core.setFailed('Not all required CI checks have passed');
            }
