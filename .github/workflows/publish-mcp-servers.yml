name: Publish Updated MCP Servers

on:
  push:
    branches:
      - main

jobs:
  wait-for-ci:
    name: Wait for CI
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CI Build & Test Checks
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = context.sha;

            console.log(`Waiting for CI Build & Test Checks on SHA: ${sha}`);

            // Wait a bit for the CI workflow to start
            console.log('Waiting 30 seconds for CI workflow to start...');
            await new Promise(resolve => setTimeout(resolve, 30000));

            const maxWaitTime = 10 * 60 * 1000; // 10 minutes
            const checkInterval = 10 * 1000; // 10 seconds
            const startTime = Date.now();

            while (Date.now() - startTime < maxWaitTime) {
              const checkRuns = await github.rest.checks.listForRef({
                owner,
                repo,
                ref: sha,
                per_page: 100
              });
              
              console.log(`Found ${checkRuns.data.check_runs.length} check runs:`);
              for (const run of checkRuns.data.check_runs) {
                console.log(`- ${run.name}: ${run.status} (${run.conclusion})`);
              }
              
              const ciCheck = checkRuns.data.check_runs.find(run => 
                run.name === 'CI Build & Test Checks Passed'
              );
              
              if (ciCheck) {
                console.log(`Found CI check: ${ciCheck.name} - ${ciCheck.status} (${ciCheck.conclusion})`);
                if (ciCheck.status === 'completed') {
                  if (ciCheck.conclusion === 'success') {
                    console.log('‚úÖ CI Build & Test Checks passed');
                    return;
                  } else {
                    core.setFailed(`CI Build & Test Checks failed with conclusion: ${ciCheck.conclusion}`);
                    return;
                  }
                }
              } else {
                console.log('‚ùå CI Build & Test Checks Passed check not found yet');
              }
              
              console.log(`Waiting for CI checks... (${Math.round((Date.now() - startTime) / 1000)}s elapsed)`);
              await new Promise(resolve => setTimeout(resolve, checkInterval));
            }

            core.setFailed('Timeout waiting for CI Build & Test Checks');

  detect-and-publish:
    needs: wait-for-ci
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need to compare with previous commit

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://registry.npmjs.org'

      - name: Detect version changes
        id: detect-changes
        run: |
          echo "Detecting version changes..."

          # Initialize arrays to track servers to publish
          SERVERS_TO_PUBLISH=""

          # Get list of changed package.json files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E "(experimental|productionized|^[^/]+)/[^/]+/local/package\.json$" || true)

          if [ -z "$CHANGED_FILES" ]; then
            echo "No package.json files changed"
            echo "publish_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          for file in $CHANGED_FILES; do
            echo "Checking $file..."
            
            # Get server directory
            SERVER_DIR=$(dirname $(dirname "$file"))
            LOCAL_DIR="$SERVER_DIR/local"
            
            # Check if file exists (might have been deleted)
            if [ ! -f "$file" ]; then
              echo "File deleted, skipping: $file"
              continue
            fi
            
            # Get current version
            CURRENT_VERSION=$(node -e "console.log(require('./$file').version)")
            PACKAGE_NAME=$(node -e "console.log(require('./$file').name)")
            
            # Get previous version
            PREV_VERSION=$(git show HEAD~1:$file 2>/dev/null | node -e "
              try {
                const pkg = JSON.parse(require('fs').readFileSync(0, 'utf8'));
                console.log(pkg.version);
              } catch (e) {
                console.log('0.0.0');
              }
            ")
            
            echo "Package: $PACKAGE_NAME"
            echo "Previous version: $PREV_VERSION"
            echo "Current version: $CURRENT_VERSION"
            
            # Check if version was bumped
            if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
              echo "Version bumped! Adding to publish list..."
              SERVERS_TO_PUBLISH="$SERVERS_TO_PUBLISH $LOCAL_DIR"
            else
              echo "Version unchanged, skipping"
            fi
            
            echo "---"
          done

          if [ -z "$SERVERS_TO_PUBLISH" ]; then
            echo "No servers need publishing"
            echo "publish_needed=false" >> $GITHUB_OUTPUT
          else
            echo "Servers to publish: $SERVERS_TO_PUBLISH"
            echo "publish_needed=true" >> $GITHUB_OUTPUT
            echo "servers=$SERVERS_TO_PUBLISH" >> $GITHUB_OUTPUT
          fi

      - name: Publish servers
        if: steps.detect-changes.outputs.publish_needed == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          echo "Publishing MCP servers..."

          SERVERS="${{ steps.detect-changes.outputs.servers }}"
          PUBLISHED_SERVERS=""
          FAILED_SERVERS=""

          for LOCAL_DIR in $SERVERS; do
            echo "Processing $LOCAL_DIR..."
            
            cd "$LOCAL_DIR"
            
            # Get package info
            PACKAGE_NAME=$(node -e "console.log(require('./package.json').name)")
            PACKAGE_VERSION=$(node -e "console.log(require('./package.json').version)")
            
            echo "Publishing $PACKAGE_NAME@$PACKAGE_VERSION..."
            
            # Install dependencies - use ci:install if available
            echo "Installing dependencies..."
            if npm run --silent ci:install 2>/dev/null; then
              echo "Dependencies installed with ci:install"
            else
              echo "No ci:install script found, using npm install"
              npm install
            fi
            
            # Check if version already exists on npm
            if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
              echo "Version $PACKAGE_VERSION already published, skipping"
              cd - > /dev/null
              continue
            fi
            
            # Publish to npm
            if npm publish --access public; then
              echo "‚úÖ Successfully published $PACKAGE_NAME@$PACKAGE_VERSION to npm"
              
              # Validate the published package is available on npm
              echo "üîç Validating published package availability..."
              VALIDATION_FAILED=false
              
              # Wait for npm registry propagation and verify package metadata
              echo "Waiting for npm registry propagation..."
              # Increase timeout to 3 minutes (36 iterations √ó 5 seconds)
              for i in {1..36}; do
                PUBLISHED_VERSION=$(npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null || true)
                if [ "$PUBLISHED_VERSION" = "$PACKAGE_VERSION" ]; then
                  echo "‚úÖ Package $PACKAGE_NAME@$PACKAGE_VERSION available on npm registry"
                  
                  # Additional validation: check package has required metadata
                  MAIN_FIELD=$(npm view "$PACKAGE_NAME@$PACKAGE_VERSION" main 2>/dev/null || true)
                  FILES_FIELD=$(npm view "$PACKAGE_NAME@$PACKAGE_VERSION" files 2>/dev/null || true)
                  
                  if [ -z "$MAIN_FIELD" ]; then
                    echo "‚ö†Ô∏è  Warning: Package missing 'main' field in package.json"
                  else
                    echo "‚úÖ Package has main field: $MAIN_FIELD"
                  fi
                  
                  if [ -z "$FILES_FIELD" ]; then
                    echo "‚ö†Ô∏è  Warning: Package missing 'files' field - may include unintended files"
                  else
                    echo "‚úÖ Package has files field configured"
                  fi
                  
                  break
                fi
                if [ $i -eq 36 ]; then
                  echo "‚ùå Package not available after 180 seconds - registry propagation failed"
                  VALIDATION_FAILED=true
                fi
                echo "Waiting for registry propagation... ($i/36)"
                sleep 5
              done
              
              # Check validation results
              if [ "$VALIDATION_FAILED" = true ]; then
                echo "‚ùå Package validation failed for $PACKAGE_NAME@$PACKAGE_VERSION"
                FAILED_SERVERS="$FAILED_SERVERS\n- $PACKAGE_NAME@$PACKAGE_VERSION (published but validation failed)"
              else
                echo "‚úÖ Package validation successful for $PACKAGE_NAME@$PACKAGE_VERSION"
                PUBLISHED_SERVERS="$PUBLISHED_SERVERS\n- $PACKAGE_NAME@$PACKAGE_VERSION"
                
                # Create GitHub release
                TAG_NAME="${PACKAGE_NAME}@${PACKAGE_VERSION}"
                SERVER_DIR=$(dirname "$LOCAL_DIR")
                SERVER_NAME=$(basename "$SERVER_DIR")
                
                # Extract changelog entry for this version
                CHANGELOG_FILE="$SERVER_DIR/CHANGELOG.md"
                if [ -f "$CHANGELOG_FILE" ]; then
                  # Extract the changelog section for this version
                  # Look for version with or without 'v' prefix and handle both formats
                  CHANGELOG_ENTRY=$(awk "/## \[v?$PACKAGE_VERSION\]/{flag=1; next} /## \[/{flag=0} flag" "$CHANGELOG_FILE" | sed '/^$/d')
                  
                  if [ -z "$CHANGELOG_ENTRY" ]; then
                    echo "Warning: No changelog entry found for version $PACKAGE_VERSION"
                    RELEASE_NOTES="# $PACKAGE_NAME v$PACKAGE_VERSION"$'\n\n'"Published to npm: https://www.npmjs.com/package/$PACKAGE_NAME"
                  else
                    RELEASE_NOTES="# $PACKAGE_NAME v$PACKAGE_VERSION"$'\n\n'"$CHANGELOG_ENTRY"$'\n\n'"---"$'\n'"Published to npm: https://www.npmjs.com/package/$PACKAGE_NAME"
                  fi
                else
                  RELEASE_NOTES="# $PACKAGE_NAME v$PACKAGE_VERSION"$'\n\n'"Published to npm: https://www.npmjs.com/package/$PACKAGE_NAME"
                fi
                
                # Create release using GitHub CLI
                echo "Creating GitHub release for $TAG_NAME..."
                if echo "$RELEASE_NOTES" | gh release create "$TAG_NAME" \
                  --title "$PACKAGE_NAME v$PACKAGE_VERSION" \
                  --notes-file - \
                  --target main \
                  --latest=false; then
                  echo "‚úÖ GitHub release created successfully"
                else
                  echo "‚ùå Failed to create GitHub release"
                  echo "Attempting to check if tag exists..."
                  if ! git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
                    echo "Tag $TAG_NAME does not exist. The tag should have been created during 'npm version' command."
                    echo "Check if the version bump process created the tag correctly."
                  else
                    echo "Tag exists but release creation failed. Check GitHub permissions."
                  fi
                fi
              fi
            else
              echo "‚ùå Failed to publish $PACKAGE_NAME@$PACKAGE_VERSION"
              FAILED_SERVERS="$FAILED_SERVERS\n- $PACKAGE_NAME@$PACKAGE_VERSION"
            fi
            
            cd - > /dev/null
            echo "---"
          done

          # Summary
          echo "## Publishing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -n "$PUBLISHED_SERVERS" ]; then
            echo "### ‚úÖ Successfully Published:" >> $GITHUB_STEP_SUMMARY
            echo -e "$PUBLISHED_SERVERS" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -n "$FAILED_SERVERS" ]; then
            echo "### ‚ùå Failed to Publish:" >> $GITHUB_STEP_SUMMARY
            echo -e "$FAILED_SERVERS" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: No servers to publish
        if: steps.detect-changes.outputs.publish_needed == 'false'
        run: |
          echo "No MCP servers require publishing" >> $GITHUB_STEP_SUMMARY
